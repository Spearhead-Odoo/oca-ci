#!/bin/bash

#
# Install dependencies of addons to test, and add addons to test to Odoo's addons_path.
#
# An alternative technique would be to install all addons with `pip install --editable`
# but it is relatively slow in repos with a large number of addons. This is an area
# where pip could improve.
#

set -ex
shopt -s nullglob  # in case there is setup.py nor pyproject.toml

# Compute and install direct dependencies of installable addons in $ADDONS_DIR
# (this includes addons, python external dependencies and odoo itself).
# The environment variables are for better perfomance as we are interested in
# the dependencies metadata only, and not the exact versions.
# --no-isolation is for performance. The Dockerfile has setuptools-odoo and whool
# preinstalled in the same environment as pyproject-dependencies.
# --ignore-build-errors is needed to avoid errors with uninstallable addons.
env SETUPTOOLS_ODOO_POST_VERSION_STRATEGY_OVERRIDE=none \
    WHOOL_POST_VERSION_STRATEGY_OVERRIDE=none \
    pyproject-dependencies \
      --no-isolation \
      --ignore-build-errors \
      ${ADDONS_DIR}/*/pyproject.toml ${ADDONS_DIR}/setup/*/setup.py \
      >> test-requirements.txt

# Install addons in current repo in editable mode, so coverage will see them.
cat test-requirements.txt
pip install -r test-requirements.txt
pip config list
pip list

# Add ADDONS_DIR to addons_path.
echo "addons_path=${ADDONS_PATH},${ADDONS_DIR}" >> ${ODOO_RC}
cat ${ODOO_RC}

deps=$(oca_list_external_dependencies deb)
if [ -n "$deps" ]; then
    apt-get update -qq
    # Install 'deb' external dependencies of all Odoo addons found in path.
    DEBIAN_FRONTEND=noninteractive apt-get install -qq --no-install-recommends ${deps}
fi

